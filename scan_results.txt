========================================
lintr scan
========================================

AIR_functions.R:3:13: warning: [seq_linter] 1:length(...) is likely to be wrong in the empty edge case. Use seq_along(...) instead.
  for (i in 1:length(node)) {
            ^~~~~~~~~~~~~~
AIR_functions.R:5:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 89 characters.
    node_definition <- paste0("\"", node[i], "\" [style=filled, fillcolor=", color, "];")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
AIR_functions.R:6:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:8:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 92 characters.
    dot_code <- sub("digraph g \\{", paste0("digraph g {\r\n  ", node_definition), dot_code)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
AIR_functions.R:10:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:14:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
AIR_getGraph <- function(data, knowledge){
^~~~~~~~~~~~
AIR_functions.R:14:42: style: [brace_linter] There should be a space before an opening curly brace.
AIR_getGraph <- function(data, knowledge){
                                         ^
AIR_functions.R:14:42: style: [paren_body_linter] There should be a space between a right parenthesis and a body expression.
AIR_getGraph <- function(data, knowledge){
                                         ^
AIR_functions.R:16:9: warning: [object_usage_linter] no visible binding for global variable 'TetradSearch'
  ts <- TetradSearch$new(data)
        ^~~~~~~~~~~~
AIR_functions.R:17:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:19:13: warning: [seq_linter] 1:nrow(...) is likely to be wrong in the empty edge case. Use seq_len(nrow(...)) instead.
  for (i in 1:nrow(knowledge)) {
            ^~~~~~~~~~~~~~~~~
AIR_functions.R:20:32: style: [commas_linter] Commas should always have a space after.
    ts$add_to_tier(knowledge[i,]$level, knowledge[i,]$variable)
                               ^
AIR_functions.R:20:53: style: [commas_linter] Commas should always have a space after.
    ts$add_to_tier(knowledge[i,]$level, knowledge[i,]$variable)
                                                    ^
AIR_functions.R:22:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:23:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:25:5: style: [commented_code_linter] Commented code should be removed.
  # graph <- ts$run_boss(penalty_discount = 2)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:29:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:30:15: warning: [object_usage_linter] local variable 'object_string' assigned but may not be used
  graphtxt <- object_string <- .jcall(ts$print_graph(graph), "Ljava/lang/String;", "toString")
              ^~~~~~~~~~~~~
AIR_functions.R:30:32: warning: [object_usage_linter] no visible global function definition for '.jcall'
  graphtxt <- object_string <- .jcall(ts$print_graph(graph), "Ljava/lang/String;", "toString")
                               ^~~~~~
AIR_functions.R:30:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 94 characters.
  graphtxt <- object_string <- .jcall(ts$print_graph(graph), "Ljava/lang/String;", "toString")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
AIR_functions.R:31:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:32:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:33:5: style: [commented_code_linter] Commented code should be removed.
  # graphtxt <- .jcall("edu/cmu/tetrad/graph/GraphSaveLoadUtils", "Ljava/lang/String;", "graphToDot", graph)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:33:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 108 characters.
  # graphtxt <- .jcall("edu/cmu/tetrad/graph/GraphSaveLoadUtils", "Ljava/lang/String;", "graphToDot", graph)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:34:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:35:3: warning: [object_usage_linter] no visible global function definition for 'write_file'
  write_file(x = graphtxt, file = "graphtxt.txt")
  ^~~~~~~~~~
AIR_functions.R:36:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:40:22: style: [brace_linter] There should be a space before an opening curly brace.
scale_ <- function(x){
                     ^
AIR_functions.R:40:22: style: [paren_body_linter] There should be a space between a right parenthesis and a body expression.
scale_ <- function(x){
                     ^
AIR_functions.R:44:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
runSuperLearner <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){ 
^~~~~~~~~~~~~~~
AIR_functions.R:44:39: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
runSuperLearner <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){ 
                                      ^~~~~~~
AIR_functions.R:44:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 92 characters.
runSuperLearner <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){ 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
AIR_functions.R:44:91: style: [brace_linter] There should be a space before an opening curly brace.
runSuperLearner <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){ 
                                                                                          ^
AIR_functions.R:44:91: style: [paren_body_linter] There should be a space between a right parenthesis and a body expression.
runSuperLearner <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){ 
                                                                                          ^~
AIR_functions.R:44:92: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
runSuperLearner <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){ 
                                                                                           ^
AIR_functions.R:45:3: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
  Z_level <- settings$Z_level
  ^~~~~~~
AIR_functions.R:46:3: warning: [object_usage_linter] local variable 'doc_title' assigned but may not be used
  doc_title <- settings$doc_title
  ^~~~~~~~~
AIR_functions.R:47:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:50:11: style: [assignment_linter] Use <-, not =, for assignment.
  outcome =  df_vars[df_vars$var == "OV",]$val
          ^
AIR_functions.R:50:14: warning: [object_usage_linter] no visible binding for global variable 'df_vars'
  outcome =  df_vars[df_vars$var == "OV",]$val
             ^~~~~~~
AIR_functions.R:50:14: warning: [object_usage_linter] no visible binding for global variable 'df_vars'
  outcome =  df_vars[df_vars$var == "OV",]$val
             ^~~~~~~
AIR_functions.R:50:42: style: [commas_linter] Commas should always have a space after.
  outcome =  df_vars[df_vars$var == "OV",]$val
                                         ^
AIR_functions.R:51:5: style: [commented_code_linter] Commented code should be removed.
  # mediators = df |> select(-c(treatment, outcome, confounders)) |> colnames() # unnecessary unless doing mediation analysis
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:51:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 125 characters.
  # mediators = df |> select(-c(treatment, outcome, confounders)) |> colnames() # unnecessary unless doing mediation analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:52:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:53:9: warning: [object_usage_linter] no visible global function definition for 'read_csv'
  df <- read_csv(paste0(AIRHome,"/data/datafile.csv")) # can probably remove this as it's likely redundant
        ^~~~~~~~
AIR_functions.R:53:33: style: [commas_linter] Commas should always have a space after.
  df <- read_csv(paste0(AIRHome,"/data/datafile.csv")) # can probably remove this as it's likely redundant
                                ^
AIR_functions.R:53:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 106 characters.
  df <- read_csv(paste0(AIRHome,"/data/datafile.csv")) # can probably remove this as it's likely redundant
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:64:4: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  } 
   ^
AIR_functions.R:75:4: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  } 
   ^
AIR_functions.R:79:5: style: [commented_code_linter] Commented code should be removed.
  # sl3_list_learners("binomial") 
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:79:34: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  # sl3_list_learners("binomial") 
                                 ^
AIR_functions.R:80:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:81:16: warning: [object_usage_linter] no visible global function definition for 'make_learner'
  lrnr_mean <- make_learner(Lrnr_mean)
               ^~~~~~~~~~~~
AIR_functions.R:81:29: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_mean'
  lrnr_mean <- make_learner(Lrnr_mean)
                            ^~~~~~~~~
AIR_functions.R:82:15: warning: [object_usage_linter] no visible global function definition for 'make_learner'
  lrnr_glm <- make_learner(Lrnr_glm)
              ^~~~~~~~~~~~
AIR_functions.R:82:28: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_glm'
  lrnr_glm <- make_learner(Lrnr_glm)
                           ^~~~~~~~
AIR_functions.R:83:5: style: [commented_code_linter] Commented code should be removed.
  # lrnr_pois <- make_learner(Lrnr_glm, family = 'poisson')
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:84:15: warning: [object_usage_linter] no visible global function definition for 'make_learner'
  lrnr_hal <- make_learner(Lrnr_hal9001)
              ^~~~~~~~~~~~
AIR_functions.R:84:28: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_hal9001'
  lrnr_hal <- make_learner(Lrnr_hal9001)
                           ^~~~~~~~~~~~
AIR_functions.R:85:16: warning: [object_usage_linter] no visible global function definition for 'make_learner'
  lrnr_nnet <- make_learner(Lrnr_nnet)
               ^~~~~~~~~~~~
AIR_functions.R:85:29: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_nnet'
  lrnr_nnet <- make_learner(Lrnr_nnet)
                            ^~~~~~~~~
AIR_functions.R:86:19: warning: [object_usage_linter] no visible global function definition for 'make_learner'
  lrnr_rforest <- make_learner(Lrnr_randomForest)
                  ^~~~~~~~~~~~
AIR_functions.R:86:32: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_randomForest'
  lrnr_rforest <- make_learner(Lrnr_randomForest)
                               ^~~~~~~~~~~~~~~~~
AIR_functions.R:87:18: warning: [object_usage_linter] no visible global function definition for 'make_learner'
  lrnr_ranger <- make_learner(Lrnr_ranger)
                 ^~~~~~~~~~~~
AIR_functions.R:87:31: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_ranger'
  lrnr_ranger <- make_learner(Lrnr_ranger)
                              ^~~~~~~~~~~
AIR_functions.R:88:18: warning: [object_usage_linter] no visible global function definition for 'make_learner'
  lrnr_glmnet <- make_learner(Lrnr_glmnet)
                 ^~~~~~~~~~~~
AIR_functions.R:88:31: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_glmnet'
  lrnr_glmnet <- make_learner(Lrnr_glmnet)
                              ^~~~~~~~~~~
AIR_functions.R:89:19: warning: [object_usage_linter] no visible global function definition for 'make_learner'
  lrnr_xgboost <- make_learner(Lrnr_xgboost, max_depth = 4, eta = 0.01, nrounds = 100)  
                  ^~~~~~~~~~~~
AIR_functions.R:89:32: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_xgboost'
  lrnr_xgboost <- make_learner(Lrnr_xgboost, max_depth = 4, eta = 0.01, nrounds = 100)  
                               ^~~~~~~~~~~~
AIR_functions.R:89:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 88 characters.
  lrnr_xgboost <- make_learner(Lrnr_xgboost, max_depth = 4, eta = 0.01, nrounds = 100)  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~
AIR_functions.R:89:87: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  lrnr_xgboost <- make_learner(Lrnr_xgboost, max_depth = 4, eta = 0.01, nrounds = 100)  
                                                                                      ^~
AIR_functions.R:90:17: warning: [object_usage_linter] no visible global function definition for 'make_learner'
  lrnr_earth <- make_learner(Lrnr_earth)  
                ^~~~~~~~~~~~
AIR_functions.R:90:30: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_earth'
  lrnr_earth <- make_learner(Lrnr_earth)  
                             ^~~~~~~~~~
AIR_functions.R:90:41: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  lrnr_earth <- make_learner(Lrnr_earth)  
                                        ^~
AIR_functions.R:91:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:93:12: warning: [object_usage_linter] no visible global function definition for 'make_learner'
    sl_ <- make_learner(Stack, unlist(list(lrnr_mean, 
           ^~~~~~~~~~~~
AIR_functions.R:93:25: warning: [object_usage_linter] no visible binding for global variable 'Stack'
    sl_ <- make_learner(Stack, unlist(list(lrnr_mean, 
                        ^~~~~
AIR_functions.R:93:54: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    sl_ <- make_learner(Stack, unlist(list(lrnr_mean, 
                                                     ^
AIR_functions.R:96:56: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
                                           lrnr_ranger, 
                                                       ^
AIR_functions.R:98:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 105 characters.
                                           lrnr_glmnet, # this is the difference. It needs 2+ confounders
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:101:55: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
                                           lrnr_nnet), 
                                                      ^
AIR_functions.R:104:12: warning: [object_usage_linter] no visible global function definition for 'make_learner'
    sl_ <- make_learner(Stack, unlist(list(lrnr_mean, 
           ^~~~~~~~~~~~
AIR_functions.R:104:25: warning: [object_usage_linter] no visible binding for global variable 'Stack'
    sl_ <- make_learner(Stack, unlist(list(lrnr_mean, 
                        ^~~~~
AIR_functions.R:104:54: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    sl_ <- make_learner(Stack, unlist(list(lrnr_mean, 
                                                     ^
AIR_functions.R:107:56: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
                                           lrnr_ranger, 
                                                       ^
AIR_functions.R:111:55: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
                                           lrnr_nnet), 
                                                      ^
AIR_functions.R:114:25: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  # DEFINE SL_Y AND SL_A 
                        ^
AIR_functions.R:117:3: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
  Q_learner <- Lrnr_sl$new(learners = sl_, 
  ^~~~~~~~~
AIR_functions.R:117:16: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_sl'
  Q_learner <- Lrnr_sl$new(learners = sl_, 
               ^~~~~~~
AIR_functions.R:117:43: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  Q_learner <- Lrnr_sl$new(learners = sl_, 
                                          ^
AIR_functions.R:118:42: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_nnls'
                           metalearner = Lrnr_nnls$new(convex = T)) # output model
                                         ^~~~~~~~~
AIR_functions.R:118:66: style: [T_and_F_symbol_linter] Use TRUE instead of the symbol T.
                           metalearner = Lrnr_nnls$new(convex = T)) # output model
                                                                ~^
AIR_functions.R:118:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 82 characters.
                           metalearner = Lrnr_nnls$new(convex = T)) # output model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
AIR_functions.R:119:16: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_sl'
  g_learner <- Lrnr_sl$new(learners = sl_, 
               ^~~~~~~
AIR_functions.R:119:43: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  g_learner <- Lrnr_sl$new(learners = sl_, 
                                          ^
AIR_functions.R:120:42: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_nnls'
                           metalearner = Lrnr_nnls$new(convex = T)) # treatment model
                                         ^~~~~~~~~
AIR_functions.R:120:66: style: [T_and_F_symbol_linter] Use TRUE instead of the symbol T.
                           metalearner = Lrnr_nnls$new(convex = T)) # treatment model
                                                                ~^
AIR_functions.R:120:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 85 characters.
                           metalearner = Lrnr_nnls$new(convex = T)) # treatment model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~
AIR_functions.R:123:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:125:15: warning: [object_usage_linter] no visible global function definition for 'tmle_ATE'
  ate_spec <- tmle_ATE(treatment_level = 1, control_level = 0)
              ^~~~~~~~
AIR_functions.R:126:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:128:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:134:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:137:16: warning: [object_usage_linter] no visible global function definition for 'tmle3'
  tmle_fit_ <- tmle3(tmle_spec = ate_spec, 
               ^~~~~
AIR_functions.R:137:43: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  tmle_fit_ <- tmle3(tmle_spec = ate_spec, 
                                          ^
AIR_functions.R:138:32: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
                     data = df, 
                               ^
AIR_functions.R:139:41: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
                     node_list = nodes_, 
                                        ^
AIR_functions.R:141:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:143:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:148:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:151:46: style: [commas_linter] Commas should always have a space after.
  propensity_score <- propensity_score * df[,..treatment] + (1 - propensity_score) * (1 - df[,..treatment])
                                             ^
AIR_functions.R:151:46: warning: [object_usage_linter] no visible binding for global variable '..treatment'
  propensity_score <- propensity_score * df[,..treatment] + (1 - propensity_score) * (1 - df[,..treatment])
                                             ^~~~~~~~~~~
AIR_functions.R:151:46: warning: [object_usage_linter] no visible binding for global variable '..treatment'
  propensity_score <- propensity_score * df[,..treatment] + (1 - propensity_score) * (1 - df[,..treatment])
                                             ^~~~~~~~~~~
AIR_functions.R:151:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 107 characters.
  propensity_score <- propensity_score * df[,..treatment] + (1 - propensity_score) * (1 - df[,..treatment])
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:151:95: style: [commas_linter] Commas should always have a space after.
  propensity_score <- propensity_score * df[,..treatment] + (1 - propensity_score) * (1 - df[,..treatment])
                                                                                              ^
AIR_functions.R:152:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:153:12: warning: [object_usage_linter] no visible global function definition for 'tibble'
  plap_ <- tibble(exposure = df[,..treatment] |> pull(),
           ^~~~~~
AIR_functions.R:153:34: style: [commas_linter] Commas should always have a space after.
  plap_ <- tibble(exposure = df[,..treatment] |> pull(),
                                 ^
AIR_functions.R:153:34: warning: [object_usage_linter] no visible binding for global variable '..treatment'
  plap_ <- tibble(exposure = df[,..treatment] |> pull(),
                                 ^~~~~~~~~~~
AIR_functions.R:153:50: warning: [object_usage_linter] no visible global function definition for 'pull'
  plap_ <- tibble(exposure = df[,..treatment] |> pull(),
                                                 ^~~~
AIR_functions.R:153:50: warning: [object_usage_linter] no visible global function definition for 'pull'
  plap_ <- tibble(exposure = df[,..treatment] |> pull(),
                                                 ^~~~
AIR_functions.R:155:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:156:53: style: [infix_spaces_linter] Put spaces around all infix operators.
  plap_$sw <- plap_$exposure * (mean(plap_$exposure)/propensity_score) + (1 - plap_$exposure) * ((1 - mean(plap_$exposure)) / (1 - propensity_score))
                                                    ^
AIR_functions.R:156:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 149 characters.
  plap_$sw <- plap_$exposure * (mean(plap_$exposure)/propensity_score) + (1 - plap_$exposure) * ((1 - mean(plap_$exposure)) / (1 - propensity_score))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:157:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:160:60: style: [commas_linter] Commas should always have a space after.
  write.table(cbind(treatment, Z_level, tmle_fit_$summary[,c(8:10)], deparse.level = 0), 
                                                           ^
AIR_functions.R:160:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 89 characters.
  write.table(cbind(treatment, Z_level, tmle_fit_$summary[,c(8:10)], deparse.level = 0), 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
AIR_functions.R:160:89: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  write.table(cbind(treatment, Z_level, tmle_fit_$summary[,c(8:10)], deparse.level = 0), 
                                                                                        ^
AIR_functions.R:161:54: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
              file = paste0(AIRHome, "/Results.csv"), 
                                                     ^
AIR_functions.R:162:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 92 characters.
              sep = ",", append = TRUE, quote = FALSE, col.names = FALSE, row.names = FALSE)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
AIR_functions.R:163:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:164:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:167:76: style: [commas_linter] Commas should always have a space after.
  initial_likelihood_preds <- initial_likelihood$get_likelihoods(tmle_task,"Y")
                                                                           ^
AIR_functions.R:170:5: warning: [object_usage_linter] no visible global function definition for 'define_lf'
    define_lf(LF_emp, "W"),
    ^~~~~~~~~
AIR_functions.R:170:5: warning: [object_usage_linter] no visible global function definition for 'define_lf'
    define_lf(LF_emp, "W"),
    ^~~~~~~~~
AIR_functions.R:170:5: warning: [object_usage_linter] no visible global function definition for 'define_lf'
    define_lf(LF_emp, "W"),
    ^~~~~~~~~
AIR_functions.R:170:15: warning: [object_usage_linter] no visible binding for global variable 'LF_emp'
    define_lf(LF_emp, "W"),
              ^~~~~~
AIR_functions.R:171:15: warning: [object_usage_linter] no visible binding for global variable 'LF_fit'
    define_lf(LF_fit, "A", sl_),
              ^~~~~~
AIR_functions.R:171:15: warning: [object_usage_linter] no visible binding for global variable 'LF_fit'
    define_lf(LF_fit, "A", sl_),
              ^~~~~~
AIR_functions.R:174:21: warning: [object_usage_linter] no visible binding for global variable 'Likelihood'
  likelihood_def <- Likelihood$new(factor_list)
                    ^~~~~~~~~~
AIR_functions.R:176:70: style: [commas_linter] Commas should always have a space after.
  likelihood_values <- rowMeans(likelihood$get_likelihoods(tmle_task,"Y"))
                                                                     ^
AIR_functions.R:177:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:178:5: style: [commented_code_linter] Commented code should be removed.
  # print("super learner coefficients for PS model")
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:181:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:182:5: style: [commented_code_linter] Commented code should be removed.
  # print("super learner coefficients for outcome model")
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:183:3: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
  Q_fit <- tmle_fit_$likelihood$factor_list[["Y"]]$learner
  ^~~~~
AIR_functions.R:185:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:188:20: warning: [object_usage_linter] no visible global function definition for 'define_lf'
  intervention1 <- define_lf(LF_static, "A", value = 1)
                   ^~~~~~~~~
AIR_functions.R:188:30: warning: [object_usage_linter] no visible binding for global variable 'LF_static'
  intervention1 <- define_lf(LF_static, "A", value = 1)
                             ^~~~~~~~~
AIR_functions.R:189:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:190:21: warning: [object_usage_linter] no visible global function definition for 'make_CF_Likelihood'
  cf_likelihood1 <- make_CF_Likelihood(likelihood, intervention1)
                    ^~~~~~~~~~~~~~~~~~
AIR_functions.R:191:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:193:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:197:20: warning: [object_usage_linter] no visible global function definition for 'define_lf'
  intervention0 <- define_lf(LF_static, "A", value = 0)
                   ^~~~~~~~~
AIR_functions.R:197:30: warning: [object_usage_linter] no visible binding for global variable 'LF_static'
  intervention0 <- define_lf(LF_static, "A", value = 0)
                             ^~~~~~~~~
AIR_functions.R:199:21: warning: [object_usage_linter] no visible global function definition for 'make_CF_Likelihood'
  cf_likelihood0 <- make_CF_Likelihood(likelihood, intervention0)
                    ^~~~~~~~~~~~~~~~~~
AIR_functions.R:202:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 219 characters.
  # We see that the likelihood values for the A node are all either 0 or 1, as would be expected from an indicator likelihood function. In addition, the likelihood values for the non-intervention nodes have not changed.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:203:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:204:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:206:5: style: [commented_code_linter] Commented code should be removed.
  # df_out <- df[,c(nodes_$A, nodes_$Y, nodes_$W)]
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:207:19: warning: [object_usage_linter] no visible global function definition for 'select'
  df_out <- df |> select(nodes_$A, nodes_$Y, nodes_$W)
                  ^~~~~~
AIR_functions.R:217:39: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  df_out$g_fit_pred <- g_fit$predict() 
                                      ^
AIR_functions.R:219:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:220:3: warning: [object_usage_linter] no visible global function definition for 'write_csv'
  write_csv(df_out, paste0(AIRHome, "/data/", settings$doc_title,"-data.csv"))
  ^~~~~~~~~
AIR_functions.R:220:66: style: [commas_linter] Commas should always have a space after.
  write_csv(df_out, paste0(AIRHome, "/data/", settings$doc_title,"-data.csv"))
                                                                 ^
AIR_functions.R:223:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
processResults <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){
^~~~~~~~~~~~~~
AIR_functions.R:223:38: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
processResults <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){
                                     ^~~~~~~
AIR_functions.R:223:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 90 characters.
processResults <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
AIR_functions.R:223:90: style: [brace_linter] There should be a space before an opening curly brace.
processResults <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){
                                                                                         ^
AIR_functions.R:223:90: style: [paren_body_linter] There should be a space between a right parenthesis and a body expression.
processResults <- function(settings, AIRHome, tv_dir, tv_threshold, ov_dir, ov_threshold){
                                                                                         ^
AIR_functions.R:224:5: style: [commented_code_linter] Commented code should be removed.
  # setwd("~/Projects/20221005-MDLAR/Auto_Rmd/")
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:226:14: warning: [object_usage_linter] no visible binding for global variable 'df_vars'
  outcome <- df_vars[df_vars$var == "OV",]$val
             ^~~~~~~
AIR_functions.R:226:14: warning: [object_usage_linter] no visible binding for global variable 'df_vars'
  outcome <- df_vars[df_vars$var == "OV",]$val
             ^~~~~~~
AIR_functions.R:226:42: style: [commas_linter] Commas should always have a space after.
  outcome <- df_vars[df_vars$var == "OV",]$val
                                         ^
AIR_functions.R:227:3: warning: [object_usage_linter] local variable 'confounders' assigned but may not be used
  confounders <-  unique(Zvars$Z) #strsplit(x = settings$confounders, split = " ")[[1]]
  ^~~~~~~~~~~
AIR_functions.R:227:26: warning: [object_usage_linter] no visible binding for global variable 'Zvars'
  confounders <-  unique(Zvars$Z) #strsplit(x = settings$confounders, split = " ")[[1]]
                         ^~~~~
AIR_functions.R:227:36: style: [commented_code_linter] Commented code should be removed.
  confounders <-  unique(Zvars$Z) #strsplit(x = settings$confounders, split = " ")[[1]]
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:227:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 87 characters.
  confounders <-  unique(Zvars$Z) #strsplit(x = settings$confounders, split = " ")[[1]]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
AIR_functions.R:228:3: warning: [object_usage_linter] local variable 'doc_title' assigned but may not be used
  doc_title <- settings$doc_title
  ^~~~~~~~~
AIR_functions.R:229:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:231:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:232:9: warning: [object_usage_linter] no visible global function definition for 'read_csv'
  df <- read_csv(paste0(AIRHome, "/data/datafile.csv"))
        ^~~~~~~~
AIR_functions.R:243:4: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  } 
   ^
AIR_functions.R:254:4: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  } 
   ^
AIR_functions.R:255:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:257:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 172 characters.
  # I think these are not necessary...I added the code above to transform the treatment variable and am commenting out all the rest,  just like in the superlearner function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:258:5: style: [commented_code_linter] Commented code should be removed.
  # df[treatment] <- ifelse(df[treatment] >= 0, 1, 0)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:259:5: style: [commented_code_linter] Commented code should be removed.
  # df[confounders] <- ifelse(df[confounders] >= 0, 1, 0)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:260:5: style: [commented_code_linter] Commented code should be removed.
  # df[outcome] <- ifelse(df[outcome] >= 0, 1, 0) # removed the >= for >, because it makes more sense... hopefully that wasn't a mistake
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:260:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 136 characters.
  # df[outcome] <- ifelse(df[outcome] >= 0, 1, 0) # removed the >= for >, because it makes more sense... hopefully that wasn't a mistake
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:261:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:262:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:264:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:266:5: style: [commented_code_linter] Commented code should be removed.
  # scale_values <- function(x){(x-min(x))/(max(x)-min(x))}
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:267:5: style: [commented_code_linter] Commented code should be removed.
  # df$images_acquired <- rescale(df$images_acquired)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:268:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:270:13: style: [assignment_linter] Use <-, not =, for assignment.
  test_size = floor(0.3 * nrow(df))
            ^
AIR_functions.R:271:8: style: [assignment_linter] Use <-, not =, for assignment.
  samp = sample(nrow(df), test_size, replace = FALSE)
       ^
AIR_functions.R:272:11: style: [assignment_linter] Use <-, not =, for assignment.
  y_train = df |> select(all_of(outcome)) |> filter(!row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
          ^
AIR_functions.R:272:19: warning: [object_usage_linter] no visible global function definition for 'select'
  y_train = df |> select(all_of(outcome)) |> filter(!row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                  ^~~~~~
AIR_functions.R:272:26: warning: [object_usage_linter] no visible global function definition for 'all_of'
  y_train = df |> select(all_of(outcome)) |> filter(!row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                         ^~~~~~
AIR_functions.R:272:54: warning: [object_usage_linter] no visible global function definition for 'row_number'
  y_train = df |> select(all_of(outcome)) |> filter(!row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                                                     ^~~~~~~~~~
AIR_functions.R:272:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 125 characters.
  y_train = df |> select(all_of(outcome)) |> filter(!row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:272:81: warning: [object_usage_linter] no visible global function definition for 'mutate'
  y_train = df |> select(all_of(outcome)) |> filter(!row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                                                                                ^~~~~~
AIR_functions.R:272:98: warning: [object_usage_linter] no visible global function definition for ':='
  y_train = df |> select(all_of(outcome)) |> filter(!row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                                                                                                 ^~
AIR_functions.R:272:108: warning: [object_usage_linter] no visible binding for global variable '.data'
  y_train = df |> select(all_of(outcome)) |> filter(!row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                                                                                                           ^~~~~
AIR_functions.R:273:11: style: [assignment_linter] Use <-, not =, for assignment.
  x_train = df |> select(-all_of(outcome)) |> filter(!row_number() %in% samp) #since the first column is just ID
          ^
AIR_functions.R:273:19: warning: [object_usage_linter] no visible global function definition for 'select'
  x_train = df |> select(-all_of(outcome)) |> filter(!row_number() %in% samp) #since the first column is just ID
                  ^~~~~~
AIR_functions.R:273:27: warning: [object_usage_linter] no visible global function definition for 'all_of'
  x_train = df |> select(-all_of(outcome)) |> filter(!row_number() %in% samp) #since the first column is just ID
                          ^~~~~~
AIR_functions.R:273:55: warning: [object_usage_linter] no visible global function definition for 'row_number'
  x_train = df |> select(-all_of(outcome)) |> filter(!row_number() %in% samp) #since the first column is just ID
                                                      ^~~~~~~~~~
AIR_functions.R:273:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 112 characters.
  x_train = df |> select(-all_of(outcome)) |> filter(!row_number() %in% samp) #since the first column is just ID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:274:10: style: [assignment_linter] Use <-, not =, for assignment.
  y_test = df |> select(all_of(outcome)) |> filter(row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
         ^
AIR_functions.R:274:18: warning: [object_usage_linter] no visible global function definition for 'select'
  y_test = df |> select(all_of(outcome)) |> filter(row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                 ^~~~~~
AIR_functions.R:274:25: warning: [object_usage_linter] no visible global function definition for 'all_of'
  y_test = df |> select(all_of(outcome)) |> filter(row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                        ^~~~~~
AIR_functions.R:274:52: warning: [object_usage_linter] no visible global function definition for 'row_number'
  y_test = df |> select(all_of(outcome)) |> filter(row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                                                   ^~~~~~~~~~
AIR_functions.R:274:79: warning: [object_usage_linter] no visible global function definition for 'mutate'
  y_test = df |> select(all_of(outcome)) |> filter(row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                                                                              ^~~~~~
AIR_functions.R:274:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 123 characters.
  y_test = df |> select(all_of(outcome)) |> filter(row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:274:96: warning: [object_usage_linter] no visible global function definition for ':='
  y_test = df |> select(all_of(outcome)) |> filter(row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                                                                                               ^~
AIR_functions.R:274:106: warning: [object_usage_linter] no visible binding for global variable '.data'
  y_test = df |> select(all_of(outcome)) |> filter(row_number() %in% samp) |> mutate(!!outcome := factor(.data[[outcome]]))
                                                                                                         ^~~~~
AIR_functions.R:275:10: style: [assignment_linter] Use <-, not =, for assignment.
  x_test = df |> select(-all_of(outcome)) |> filter(row_number() %in% samp) #since the first column is just ID
         ^
AIR_functions.R:275:18: warning: [object_usage_linter] no visible global function definition for 'select'
  x_test = df |> select(-all_of(outcome)) |> filter(row_number() %in% samp) #since the first column is just ID
                 ^~~~~~
AIR_functions.R:275:26: warning: [object_usage_linter] no visible global function definition for 'all_of'
  x_test = df |> select(-all_of(outcome)) |> filter(row_number() %in% samp) #since the first column is just ID
                         ^~~~~~
AIR_functions.R:275:53: warning: [object_usage_linter] no visible global function definition for 'row_number'
  x_test = df |> select(-all_of(outcome)) |> filter(row_number() %in% samp) #since the first column is just ID
                                                    ^~~~~~~~~~
AIR_functions.R:275:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 110 characters.
  x_test = df |> select(-all_of(outcome)) |> filter(row_number() %in% samp) #since the first column is just ID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:277:5: style: [commented_code_linter] Commented code should be removed.
  # y_train = factor(ifelse(y_train >=0, 1,0))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:278:5: style: [commented_code_linter] Commented code should be removed.
  # y_test = factor(ifelse(y_test >=0, 1,0))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:279:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:281:9: style: [assignment_linter] Use <-, not =, for assignment.
  train = cbind(y_train,x_train)
        ^
AIR_functions.R:281:25: style: [commas_linter] Commas should always have a space after.
  train = cbind(y_train,x_train)
                        ^
AIR_functions.R:282:8: style: [assignment_linter] Use <-, not =, for assignment.
  test = cbind(y_test,x_test)
       ^
AIR_functions.R:282:23: style: [commas_linter] Commas should always have a space after.
  test = cbind(y_test,x_test)
                      ^
AIR_functions.R:283:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:284:22: style: [assignment_linter] Use <-, not =, for assignment.
  colnames(train)[1] = "label"
                     ^
AIR_functions.R:285:21: style: [assignment_linter] Use <-, not =, for assignment.
  colnames(test)[1] = "label"
                    ^
AIR_functions.R:286:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:287:11: style: [assignment_linter] Use <-, not =, for assignment.
  xtest_0 = mutate(x_test, !!treatment := 0)
          ^
AIR_functions.R:287:13: warning: [object_usage_linter] no visible global function definition for 'mutate'
  xtest_0 = mutate(x_test, !!treatment := 0)
            ^~~~~~
AIR_functions.R:287:40: warning: [object_usage_linter] no visible global function definition for ':='
  xtest_0 = mutate(x_test, !!treatment := 0)
                                       ^~
AIR_functions.R:288:11: style: [assignment_linter] Use <-, not =, for assignment.
  xtest_1 = mutate(x_test, !!treatment := 1)
          ^
AIR_functions.R:288:13: warning: [object_usage_linter] no visible global function definition for 'mutate'
  xtest_1 = mutate(x_test, !!treatment := 1)
            ^~~~~~
AIR_functions.R:288:40: warning: [object_usage_linter] no visible global function definition for ':='
  xtest_1 = mutate(x_test, !!treatment := 1)
                                       ^~
AIR_functions.R:289:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:292:7: warning: [object_usage_linter] no visible binding for global variable 'model_yn'
  if (model_yn == "No") {
      ^~~~~~~~
AIR_functions.R:293:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:295:25: style: [infix_spaces_linter] Put spaces around all infix operators.
    model_lm <- lm(label~., data = train)
                        ^
AIR_functions.R:296:14: style: [assignment_linter] Use <-, not =, for assignment.
    pred_lm0 = predict(model_lm, xtest_0)
             ^
AIR_functions.R:297:14: style: [assignment_linter] Use <-, not =, for assignment.
    pred_lm1 = predict(model_lm, xtest_1)
             ^
AIR_functions.R:298:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:299:12: style: [assignment_linter] Use <-, not =, for assignment.
    lm_ate = mean(pred_lm1) - mean(pred_lm0)
           ^
AIR_functions.R:301:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:302:17: warning: [object_usage_linter] no visible global function definition for 'rpart'
    model_dt <- rpart(label~., data = train, method = "class") #rpart fails when all "labels" are the same value, so we're wrapping a stupid if logic around it to prevent errors
                ^~~~~
AIR_functions.R:302:28: style: [infix_spaces_linter] Put spaces around all infix operators.
    model_dt <- rpart(label~., data = train, method = "class") #rpart fails when all "labels" are the same value, so we're wrapping a stupid if logic around it to prevent errors
                           ^
AIR_functions.R:302:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 177 characters.
    model_dt <- rpart(label~., data = train, method = "class") #rpart fails when all "labels" are the same value, so we're wrapping a stupid if logic around it to prevent errors
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:303:14: style: [assignment_linter] Use <-, not =, for assignment.
    pred_dt0 = predict(model_dt, xtest_0)[,2]
             ^
AIR_functions.R:303:44: style: [commas_linter] Commas should always have a space after.
    pred_dt0 = predict(model_dt, xtest_0)[,2]
                                           ^
AIR_functions.R:304:14: style: [assignment_linter] Use <-, not =, for assignment.
    pred_dt1 = predict(model_dt, xtest_1)[,2]
             ^
AIR_functions.R:304:44: style: [commas_linter] Commas should always have a space after.
    pred_dt1 = predict(model_dt, xtest_1)[,2]
                                           ^
AIR_functions.R:305:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 247 characters.
    # note: rpart returns two columns for prediction because it's a classifier predicting two classes. We only want its prediction for images_acquired being a success (i.e., '1'), so we just use the corresponding column from the predict() function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:306:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:307:12: style: [assignment_linter] Use <-, not =, for assignment.
    dt_ate = mean(pred_dt1) - mean(pred_dt0)
           ^
AIR_functions.R:309:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:311:15: style: [assignment_linter] Use <-, not =, for assignment.
    model_svm = svm(label ~ ., data = test)
              ^
AIR_functions.R:311:17: warning: [object_usage_linter] no visible global function definition for 'svm'
    model_svm = svm(label ~ ., data = test)
                ^~~
AIR_functions.R:312:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:313:15: style: [assignment_linter] Use <-, not =, for assignment.
    pred_svm0 = predict(model_svm, xtest_0)
              ^
AIR_functions.R:314:15: style: [assignment_linter] Use <-, not =, for assignment.
    pred_svm1 = predict(model_svm, xtest_1)
              ^
AIR_functions.R:315:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:316:13: style: [assignment_linter] Use <-, not =, for assignment.
    svm_ate = mean(as.numeric(pred_svm1)) - mean(as.numeric(pred_svm0))
            ^
AIR_functions.R:318:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:320:14: style: [assignment_linter] Use <-, not =, for assignment.
    model_rf = randomForest(label~., data = train, importance = TRUE)
             ^
AIR_functions.R:320:16: warning: [object_usage_linter] no visible global function definition for 'randomForest'
    model_rf = randomForest(label~., data = train, importance = TRUE)
               ^~~~~~~~~~~~
AIR_functions.R:320:34: style: [infix_spaces_linter] Put spaces around all infix operators.
    model_rf = randomForest(label~., data = train, importance = TRUE)
                                 ^
AIR_functions.R:322:7: style: [commented_code_linter] Commented code should be removed.
    # saveRDS(model_rf, file = paste0(AIRHome, "/input/model.rda"))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:323:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:324:14: style: [assignment_linter] Use <-, not =, for assignment.
    pred_rf0 = predict(model_rf, xtest_0)
             ^
AIR_functions.R:325:14: style: [assignment_linter] Use <-, not =, for assignment.
    pred_rf1 = predict(model_rf, xtest_1)
             ^
AIR_functions.R:326:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:327:12: style: [assignment_linter] Use <-, not =, for assignment.
    rf_ate = mean(as.numeric(pred_rf1)) - mean(as.numeric(pred_rf0))
           ^
AIR_functions.R:329:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:330:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:331:31: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    covariate_list <- train |> 
                              ^
AIR_functions.R:332:7: warning: [object_usage_linter] no visible global function definition for 'select'
      select(-label) |> names()
      ^~~~~~
AIR_functions.R:332:15: warning: [object_usage_linter] no visible binding for global variable 'label'
      select(-label) |> names()
              ^~~~~
AIR_functions.R:332:22: style: [pipe_continuation_linter] `|>` should always have a space before it and a new line after it, unless the full pipeline fits on one line.
      select(-label) |> names()
                     ^~
AIR_functions.R:340:17: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_glm'
    lrnr_glm <- Lrnr_glm$new()
                ^~~~~~~~
AIR_functions.R:341:5: warning: [object_usage_linter] local variable 'lrnr_hal' assigned but may not be used
    lrnr_hal <- Lrnr_hal9001$new()
    ^~~~~~~~
AIR_functions.R:341:17: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_hal9001'
    lrnr_hal <- Lrnr_hal9001$new()
                ^~~~~~~~~~~~
AIR_functions.R:342:20: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_ranger'
    lrnr_ranger <- Lrnr_ranger$new()
                   ^~~~~~~~~~~
AIR_functions.R:343:21: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_randomForest'
    lrnr_rforest <- Lrnr_randomForest$new()
                    ^~~~~~~~~~~~~~~~~
AIR_functions.R:344:20: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_glmnet'
    lrnr_glmnet <- Lrnr_glmnet$new()
                   ^~~~~~~~~~~
AIR_functions.R:345:21: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_xgboost'
    lrnr_xgboost <- Lrnr_xgboost$new()
                    ^~~~~~~~~~~~
AIR_functions.R:346:19: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_earth'
    lrnr_earth <- Lrnr_earth$new()
                  ^~~~~~~~~~
AIR_functions.R:347:18: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_nnet'
    lrnr_nnet <- Lrnr_nnet$new()
                 ^~~~~~~~~
AIR_functions.R:348:17: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_svm'
    lrnr_svm <- Lrnr_svm$new()
                ^~~~~~~~
AIR_functions.R:349:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:350:30: warning: [object_usage_linter] no visible binding for global variable 'Stack'
    sl_ <- sl3::make_learner(Stack, unlist(list(lrnr_glm,
                             ^~~~~
AIR_functions.R:359:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:360:14: warning: [object_usage_linter] no visible binding for global variable 'Stack'
    stack <- Stack$new(lrnr_glm, lrnr_ranger,
             ^~~~~
AIR_functions.R:362:55: style: [spaces_inside_linter] Do not place spaces before parentheses.
                       lrnr_earth, lrnr_nnet, lrnr_svm )
                                                      ^
AIR_functions.R:363:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:364:5: warning: [object_usage_linter] local variable 'sl' assigned but may not be used
    sl <- Lrnr_sl$new(learners = stack, metalearner = Lrnr_nnls$new())
    ^~
AIR_functions.R:364:11: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_sl'
    sl <- Lrnr_sl$new(learners = stack, metalearner = Lrnr_nnls$new())
          ^~~~~~~
AIR_functions.R:364:55: warning: [object_usage_linter] no visible binding for global variable 'Lrnr_nnls'
    sl <- Lrnr_sl$new(learners = stack, metalearner = Lrnr_nnls$new())
                                                      ^~~~~~~~~
AIR_functions.R:365:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:368:5: warning: [object_usage_linter] local variable 'sl_preds' assigned but may not be used
    sl_preds <- sl_fit$predict(task = task)
    ^~~~~~~~
AIR_functions.R:369:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:370:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:371:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:372:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:373:26: warning: [object_usage_linter] no visible global function definition for 'make_sl3_Task'
    prediction_task_0 <- make_sl3_Task(
                         ^~~~~~~~~~~~~
AIR_functions.R:374:22: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
      data = xtest_0, 
                     ^
AIR_functions.R:377:26: warning: [object_usage_linter] no visible global function definition for 'make_sl3_Task'
    prediction_task_1 <- make_sl3_Task(
                         ^~~~~~~~~~~~~
AIR_functions.R:378:22: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
      data = xtest_1, 
                     ^
AIR_functions.R:383:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:384:7: style: [commented_code_linter] Commented code should be removed.
    # round(sl_preds_0$coefficients, 3)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:385:12: style: [assignment_linter] Use <-, not =, for assignment.
    sl_ate = mean(sl_preds_1) - mean(sl_preds_0)
           ^
AIR_functions.R:389:16: warning: [object_usage_linter] no visible global function definition for 'read_csv'
    results <- read_csv(paste0(AIRHome, "/Results.csv"))
               ^~~~~~~~
AIR_functions.R:390:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:391:27: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    data.frame(results) |> 
                          ^
AIR_functions.R:392:7: warning: [object_usage_linter] no visible global function definition for 'select'
      select(-Treatment) |>
      ^~~~~~
AIR_functions.R:392:15: warning: [object_usage_linter] no visible binding for global variable 'Treatment'
      select(-Treatment) |>
              ^~~~~~~~~
AIR_functions.R:393:7: warning: [object_usage_linter] no visible global function definition for 'mutate'
      mutate(Group = tolower(Group)) |>
      ^~~~~~
AIR_functions.R:393:7: warning: [object_usage_linter] no visible global function definition for 'mutate'
      mutate(Group = tolower(Group)) |>
      ^~~~~~
AIR_functions.R:393:7: warning: [object_usage_linter] no visible global function definition for 'mutate'
      mutate(Group = tolower(Group)) |>
      ^~~~~~
AIR_functions.R:393:30: warning: [object_usage_linter] no visible binding for global variable 'Group'
      mutate(Group = tolower(Group)) |>
                             ^~~~~
AIR_functions.R:393:30: warning: [object_usage_linter] no visible binding for global variable 'Group'
      mutate(Group = tolower(Group)) |>
                             ^~~~~
AIR_functions.R:394:7: warning: [object_usage_linter] no visible global function definition for 'pivot_longer'
      pivot_longer(cols = -Group, names_to = "category", values_to = "value") |>
      ^~~~~~~~~~~~
AIR_functions.R:395:7: warning: [object_usage_linter] no visible global function definition for 'unite'
      unite("new_col_name", c("Group", "category"), sep = "_") |>
      ^~~~~
AIR_functions.R:396:7: warning: [object_usage_linter] no visible global function definition for 'pivot_wider'
      pivot_wider(names_from = "new_col_name", values_from = "value") |>
      ^~~~~~~~~~~
AIR_functions.R:397:7: warning: [object_usage_linter] no visible global function definition for 'bind_cols'
      bind_cols(data.frame("algorithm" = c("Logistic Regression","Decision Tree","Random Forest","Support Vector Machine","Stacked Super Learner"),
      ^~~~~~~~~
AIR_functions.R:397:7: warning: [object_usage_linter] no visible global function definition for 'bind_cols'
      bind_cols(data.frame("algorithm" = c("Logistic Regression","Decision Tree","Random Forest","Support Vector Machine","Stacked Super Learner"),
      ^~~~~~~~~
AIR_functions.R:397:66: style: [commas_linter] Commas should always have a space after.
      bind_cols(data.frame("algorithm" = c("Logistic Regression","Decision Tree","Random Forest","Support Vector Machine","Stacked Super Learner"),
                                                                 ^
AIR_functions.R:397:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 147 characters.
      bind_cols(data.frame("algorithm" = c("Logistic Regression","Decision Tree","Random Forest","Support Vector Machine","Stacked Super Learner"),
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:397:82: style: [commas_linter] Commas should always have a space after.
      bind_cols(data.frame("algorithm" = c("Logistic Regression","Decision Tree","Random Forest","Support Vector Machine","Stacked Super Learner"),
                                                                                 ^
AIR_functions.R:397:98: style: [commas_linter] Commas should always have a space after.
      bind_cols(data.frame("algorithm" = c("Logistic Regression","Decision Tree","Random Forest","Support Vector Machine","Stacked Super Learner"),
                                                                                                 ^
AIR_functions.R:397:123: style: [commas_linter] Commas should always have a space after.
      bind_cols(data.frame("algorithm" = c("Logistic Regression","Decision Tree","Random Forest","Support Vector Machine","Stacked Super Learner"),
                                                                                                                          ^
AIR_functions.R:398:46: style: [commas_linter] Commas should always have a space after.
                           "flag" = c(lm_ate,dt_ate,svm_ate,rf_ate, sl_ate))) |>
                                             ^
AIR_functions.R:398:53: style: [commas_linter] Commas should always have a space after.
                           "flag" = c(lm_ate,dt_ate,svm_ate,rf_ate, sl_ate))) |>
                                                    ^
AIR_functions.R:398:61: style: [commas_linter] Commas should always have a space after.
                           "flag" = c(lm_ate,dt_ate,svm_ate,rf_ate, sl_ate))) |>
                                                            ^
AIR_functions.R:400:23: warning: [object_usage_linter] no visible global function definition for 'case_when'
      mutate(z1_sig = case_when((flag > z1_LCI & flag > z1_UCI) | (flag < z1_LCI & flag < z1_UCI) ~ 1,
                      ^~~~~~~~~
AIR_functions.R:400:23: warning: [object_usage_linter] no visible global function definition for 'case_when'
      mutate(z1_sig = case_when((flag > z1_LCI & flag > z1_UCI) | (flag < z1_LCI & flag < z1_UCI) ~ 1,
                      ^~~~~~~~~
AIR_functions.R:400:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 102 characters.
      mutate(z1_sig = case_when((flag > z1_LCI & flag > z1_UCI) | (flag < z1_LCI & flag < z1_UCI) ~ 1,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:402:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 102 characters.
             z2_sig = case_when((flag > z2_LCI & flag > z2_UCI) | (flag < z2_LCI & flag < z2_UCI) ~ 1,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:404:33: warning: [object_usage_linter] no visible binding for global variable 'z1_sig'
             significance = max(z1_sig, z2_sig)) |>
                                ^~~~~~
AIR_functions.R:404:41: warning: [object_usage_linter] no visible binding for global variable 'z2_sig'
             significance = max(z1_sig, z2_sig)) |>
                                        ^~~~~~
AIR_functions.R:405:7: warning: [object_usage_linter] no visible global function definition for 'rename'
      rename(z1_ATE = z1_Mean, z1_ATE_LCI = z1_LCI, z1_ATE_UCI = z1_UCI,
      ^~~~~~
AIR_functions.R:405:23: warning: [object_usage_linter] no visible binding for global variable 'z1_Mean'
      rename(z1_ATE = z1_Mean, z1_ATE_LCI = z1_LCI, z1_ATE_UCI = z1_UCI,
                      ^~~~~~~
AIR_functions.R:405:45: warning: [object_usage_linter] no visible binding for global variable 'z1_LCI'
      rename(z1_ATE = z1_Mean, z1_ATE_LCI = z1_LCI, z1_ATE_UCI = z1_UCI,
                                            ^~~~~~
AIR_functions.R:405:66: warning: [object_usage_linter] no visible binding for global variable 'z1_UCI'
      rename(z1_ATE = z1_Mean, z1_ATE_LCI = z1_LCI, z1_ATE_UCI = z1_UCI,
                                                                 ^~~~~~
AIR_functions.R:406:23: warning: [object_usage_linter] no visible binding for global variable 'z2_Mean'
             z2_ATE = z2_Mean, z2_ATE_LCI = z2_LCI, z2_ATE_UCI = z2_UCI) |>
                      ^~~~~~~
AIR_functions.R:406:45: warning: [object_usage_linter] no visible binding for global variable 'z2_LCI'
             z2_ATE = z2_Mean, z2_ATE_LCI = z2_LCI, z2_ATE_UCI = z2_UCI) |>
                                            ^~~~~~
AIR_functions.R:406:66: warning: [object_usage_linter] no visible binding for global variable 'z2_UCI'
             z2_ATE = z2_Mean, z2_ATE_LCI = z2_LCI, z2_ATE_UCI = z2_UCI) |>
                                                                 ^~~~~~
AIR_functions.R:407:29: warning: [object_usage_linter] no visible binding for global variable 'z1_ATE'
      mutate(avg.cond.ef = (z1_ATE + z2_ATE) / 2,
                            ^~~~~~
AIR_functions.R:407:38: warning: [object_usage_linter] no visible binding for global variable 'z2_ATE'
      mutate(avg.cond.ef = (z1_ATE + z2_ATE) / 2,
                                     ^~~~~~
AIR_functions.R:408:38: warning: [object_usage_linter] no visible binding for global variable 'z1_ATE_LCI'
             Lower.avg.cond.ef = min(z1_ATE_LCI, z2_ATE_LCI),
                                     ^~~~~~~~~~
AIR_functions.R:408:50: warning: [object_usage_linter] no visible binding for global variable 'z2_ATE_LCI'
             Lower.avg.cond.ef = min(z1_ATE_LCI, z2_ATE_LCI),
                                                 ^~~~~~~~~~
AIR_functions.R:409:38: warning: [object_usage_linter] no visible binding for global variable 'z1_ATE_UCI'
             Upper.avg.cond.ef = max(z1_ATE_UCI, z2_ATE_UCI)) |>
                                     ^~~~~~~~~~
AIR_functions.R:409:50: warning: [object_usage_linter] no visible binding for global variable 'z2_ATE_UCI'
             Upper.avg.cond.ef = max(z1_ATE_UCI, z2_ATE_UCI)) |>
                                                 ^~~~~~~~~~
AIR_functions.R:410:7: warning: [object_usage_linter] no visible global function definition for 'write_csv'
      write_csv(paste0(AIRHome, "/ResultsOut.csv"))
      ^~~~~~~~~
AIR_functions.R:411:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:413:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:414:9: warning: [object_usage_linter] no visible binding for global variable 'model_yn'
    if (model_yn == "Yes") {
        ^~~~~~~~
AIR_functions.R:414:9: warning: [object_usage_linter] no visible binding for global variable 'model_yn'
    if (model_yn == "Yes") {
        ^~~~~~~~
AIR_functions.R:415:9: style: [commented_code_linter] Commented code should be removed.
      # model_in <- read_rds("input/model.rda")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:416:15: style: [assignment_linter] Use <-, not =, for assignment.
      pred_m0 = predict(model_in(), xtest_0)
              ^
AIR_functions.R:416:25: warning: [object_usage_linter] no visible global function definition for 'model_in'
      pred_m0 = predict(model_in(), xtest_0)
                        ^~~~~~~~
AIR_functions.R:417:15: style: [assignment_linter] Use <-, not =, for assignment.
      pred_m1 = predict(model_in(), xtest_1)
              ^
AIR_functions.R:417:25: warning: [object_usage_linter] no visible global function definition for 'model_in'
      pred_m1 = predict(model_in(), xtest_1)
                        ^~~~~~~~
AIR_functions.R:418:9: style: [commented_code_linter] Commented code should be removed.
      # pred_m0 = predict(model_in, xtest_0)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:419:9: style: [commented_code_linter] Commented code should be removed.
      # pred_m1 = predict(model_in, xtest_1)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:420:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
      
^~~~~~
AIR_functions.R:421:13: style: [assignment_linter] Use <-, not =, for assignment.
      m_ate = mean(as.numeric(pred_m1)) - mean(as.numeric(pred_m0))
            ^
AIR_functions.R:423:13: style: [assignment_linter] Use <-, not =, for assignment.
      m_ate = model_ate
            ^
AIR_functions.R:423:15: warning: [object_usage_linter] no visible binding for global variable 'model_ate'
      m_ate = model_ate
              ^~~~~~~~~
AIR_functions.R:426:16: warning: [object_usage_linter] no visible global function definition for 'read_csv'
    results <- read_csv(paste0(AIRHome, "/Results.csv"))
               ^~~~~~~~
AIR_functions.R:427:7: style: [commented_code_linter] Commented code should be removed.
    # results <- read_csv("../airtool_streamlined/data/Results.csv")
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:428:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
AIR_functions.R:429:27: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    data.frame(results) |> 
                          ^
AIR_functions.R:430:7: warning: [object_usage_linter] no visible global function definition for 'select'
      select(-Treatment) |>
      ^~~~~~
AIR_functions.R:430:15: warning: [object_usage_linter] no visible binding for global variable 'Treatment'
      select(-Treatment) |>
              ^~~~~~~~~
AIR_functions.R:431:7: warning: [object_usage_linter] no visible global function definition for 'mutate'
      mutate(Group = tolower(Group)) |>
      ^~~~~~
AIR_functions.R:431:7: warning: [object_usage_linter] no visible global function definition for 'mutate'
      mutate(Group = tolower(Group)) |>
      ^~~~~~
AIR_functions.R:431:7: warning: [object_usage_linter] no visible global function definition for 'mutate'
      mutate(Group = tolower(Group)) |>
      ^~~~~~
AIR_functions.R:431:30: warning: [object_usage_linter] no visible binding for global variable 'Group'
      mutate(Group = tolower(Group)) |>
                             ^~~~~
AIR_functions.R:431:30: warning: [object_usage_linter] no visible binding for global variable 'Group'
      mutate(Group = tolower(Group)) |>
                             ^~~~~
AIR_functions.R:432:7: warning: [object_usage_linter] no visible global function definition for 'pivot_longer'
      pivot_longer(cols = -Group, names_to = "category", values_to = "value") |> 
      ^~~~~~~~~~~~
AIR_functions.R:432:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 81 characters.
      pivot_longer(cols = -Group, names_to = "category", values_to = "value") |> 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
AIR_functions.R:432:81: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
      pivot_longer(cols = -Group, names_to = "category", values_to = "value") |> 
                                                                                ^
AIR_functions.R:433:7: warning: [object_usage_linter] no visible global function definition for 'unite'
      unite("new_col_name", c("Group", "category"), sep = "_") |> 
      ^~~~~
AIR_functions.R:433:66: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
      unite("new_col_name", c("Group", "category"), sep = "_") |> 
                                                                 ^
AIR_functions.R:434:7: warning: [object_usage_linter] no visible global function definition for 'pivot_wider'
      pivot_wider(names_from = "new_col_name", values_from = "value") |>
      ^~~~~~~~~~~
AIR_functions.R:435:7: warning: [object_usage_linter] no visible global function definition for 'bind_cols'
      bind_cols(data.frame("algorithm" = c("Existing Model"),
      ^~~~~~~~~
AIR_functions.R:435:7: warning: [object_usage_linter] no visible global function definition for 'bind_cols'
      bind_cols(data.frame("algorithm" = c("Existing Model"),
      ^~~~~~~~~
AIR_functions.R:438:23: warning: [object_usage_linter] no visible global function definition for 'case_when'
      mutate(z1_sig = case_when((flag > z1_LCI & flag > z1_UCI) | (flag < z1_LCI & flag < z1_UCI) ~ 1,
                      ^~~~~~~~~
AIR_functions.R:438:23: warning: [object_usage_linter] no visible global function definition for 'case_when'
      mutate(z1_sig = case_when((flag > z1_LCI & flag > z1_UCI) | (flag < z1_LCI & flag < z1_UCI) ~ 1,
                      ^~~~~~~~~
AIR_functions.R:438:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 102 characters.
      mutate(z1_sig = case_when((flag > z1_LCI & flag > z1_UCI) | (flag < z1_LCI & flag < z1_UCI) ~ 1,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:440:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 102 characters.
             z2_sig = case_when((flag > z2_LCI & flag > z2_UCI) | (flag < z2_LCI & flag < z2_UCI) ~ 1,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
AIR_functions.R:442:33: warning: [object_usage_linter] no visible binding for global variable 'z1_sig'
             significance = max(z1_sig, z2_sig)) |>
                                ^~~~~~
AIR_functions.R:442:41: warning: [object_usage_linter] no visible binding for global variable 'z2_sig'
             significance = max(z1_sig, z2_sig)) |>
                                        ^~~~~~
AIR_functions.R:443:7: warning: [object_usage_linter] no visible global function definition for 'rename'
      rename(z1_ATE = z1_Mean, z1_ATE_LCI = z1_LCI, z1_ATE_UCI = z1_UCI,
      ^~~~~~
AIR_functions.R:443:23: warning: [object_usage_linter] no visible binding for global variable 'z1_Mean'
      rename(z1_ATE = z1_Mean, z1_ATE_LCI = z1_LCI, z1_ATE_UCI = z1_UCI,
                      ^~~~~~~
AIR_functions.R:443:45: warning: [object_usage_linter] no visible binding for global variable 'z1_LCI'
      rename(z1_ATE = z1_Mean, z1_ATE_LCI = z1_LCI, z1_ATE_UCI = z1_UCI,
                                            ^~~~~~
AIR_functions.R:443:66: warning: [object_usage_linter] no visible binding for global variable 'z1_UCI'
      rename(z1_ATE = z1_Mean, z1_ATE_LCI = z1_LCI, z1_ATE_UCI = z1_UCI,
                                                                 ^~~~~~
AIR_functions.R:444:23: warning: [object_usage_linter] no visible binding for global variable 'z2_Mean'
             z2_ATE = z2_Mean, z2_ATE_LCI = z2_LCI, z2_ATE_UCI = z2_UCI) |>
                      ^~~~~~~
AIR_functions.R:444:45: warning: [object_usage_linter] no visible binding for global variable 'z2_LCI'
             z2_ATE = z2_Mean, z2_ATE_LCI = z2_LCI, z2_ATE_UCI = z2_UCI) |>
                                            ^~~~~~
AIR_functions.R:444:66: warning: [object_usage_linter] no visible binding for global variable 'z2_UCI'
             z2_ATE = z2_Mean, z2_ATE_LCI = z2_LCI, z2_ATE_UCI = z2_UCI) |>
                                                                 ^~~~~~
AIR_functions.R:445:29: warning: [object_usage_linter] no visible binding for global variable 'z1_ATE'
      mutate(avg.cond.ef = (z1_ATE + z2_ATE) / 2,
                            ^~~~~~
AIR_functions.R:445:38: warning: [object_usage_linter] no visible binding for global variable 'z2_ATE'
      mutate(avg.cond.ef = (z1_ATE + z2_ATE) / 2,
                                     ^~~~~~
AIR_functions.R:446:38: warning: [object_usage_linter] no visible binding for global variable 'z1_ATE_LCI'
             Lower.avg.cond.ef = min(z1_ATE_LCI, z2_ATE_LCI),
                                     ^~~~~~~~~~
AIR_functions.R:446:50: warning: [object_usage_linter] no visible binding for global variable 'z2_ATE_LCI'
             Lower.avg.cond.ef = min(z1_ATE_LCI, z2_ATE_LCI),
                                                 ^~~~~~~~~~
AIR_functions.R:447:38: warning: [object_usage_linter] no visible binding for global variable 'z1_ATE_UCI'
             Upper.avg.cond.ef = max(z1_ATE_UCI, z2_ATE_UCI)) |>
                                     ^~~~~~~~~~
AIR_functions.R:447:50: warning: [object_usage_linter] no visible binding for global variable 'z2_ATE_UCI'
             Upper.avg.cond.ef = max(z1_ATE_UCI, z2_ATE_UCI)) |>
                                                 ^~~~~~~~~~
AIR_functions.R:448:7: warning: [object_usage_linter] no visible global function definition for 'write_csv'
      write_csv(paste0(AIRHome, "/ResultsOut.csv"))
      ^~~~~~~~~
AIR_functions.R:450:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:453:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:456:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
AIR_functions.R:457:2: style: [trailing_blank_lines_linter] Missing terminal newline.
}
 ^
identify.r:3:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 104 characters.
# Purpose: Given Treatment (TV) and Outcome (OV) variables; and graph text file (saved from Tetrad) that
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
identify.r:4:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 110 characters.
#   encodes a DAG, compute the de-confounding sets Z1 and Z2 (based on those described in MDLAR Final Report).
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:5:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 102 characters.
#   Caution: depending on the quality of the graph (and Markovianity), Z1 and Z2 might not actually be
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
identify.r:6:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 110 characters.
#   de-confounding sets. For example, there might be some unmeasured parents of the treatment variable (TV) or
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:8:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 110 characters.
#   (This is why we need to have a good dataset to begin with and good-quality CD algorithm. We might not nail
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:11:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 116 characters.
# Prerequisite: Not checked, but we assume the DAG largely satisfies the Markov Condition (MC) and Faithfulness (FC)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:13:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 125 characters.
#   In particular, this means that there is no reason to believe there is a *significant* unmeasured confounder of TV and OV.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:18:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 81 characters.
# (c) Not just DAGs where all edges are directed but CPDAGs? [difficulty unknown]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
identify.r:21:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 127 characters.
#   1. The hash and sets libraries are installed. (The info about sets is found here: https://quantifyinghealth.com/sets-in-r/)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:22:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 117 characters.
#   2. The graph spec text file has each edge specified in a numbered line in the format: "line_num. node1 --> node2"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:29:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 93 characters.
# Is the first character of a line a nonzero digit? If yes, then that line specifies an edge.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~
identify.r:37:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    return(strsplit(input_string, " "))
  ~^
identify.r:42:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    line_components <- split_line(line)
  ~^
identify.r:47:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    line_components <- split_line(line)
  ~^
identify.r:53:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    checked_so_far <- set()
  ~^
identify.r:53:23: warning: [object_usage_linter] no visible global function definition for 'set'
    checked_so_far <- set()
                      ^~~
identify.r:54:25: warning: [object_usage_linter] no visible global function definition for 'set'
    seen_not_checked <- set(node)
                        ^~~
identify.r:55:12: style: [spaces_inside_linter] Do not place spaces after parentheses.
    while ( ! set_is_empty(seen_not_checked)) {
           ^
identify.r:55:15: warning: [object_usage_linter] no visible global function definition for 'set_is_empty'
    while ( ! set_is_empty(seen_not_checked)) {
              ^~~~~~~~~~~~
identify.r:56:8: style: [indentation_linter] Indentation should be 4 spaces but is 8 spaces.
        check_these <- seen_not_checked
    ~~~^
identify.r:58:12: style: [indentation_linter] Indentation should be 6 spaces but is 12 spaces.
            for (m in children[[n]]) {
      ~~~~~^
identify.r:59:16: style: [indentation_linter] Indentation should be 8 spaces but is 16 spaces.
                if ( ! (m %e% checked_so_far)) {
        ~~~~~~~^
identify.r:59:21: style: [spaces_inside_linter] Do not place spaces after parentheses.
                if ( ! (m %e% checked_so_far)) {
                    ^
identify.r:59:27: warning: [object_usage_linter] no visible global function definition for '%e%'
                if ( ! (m %e% checked_so_far)) {
                          ^~~
identify.r:60:20: style: [indentation_linter] Indentation should be 10 spaces but is 20 spaces.
                    seen_not_checked <- seen_not_checked | set(m)
          ~~~~~~~~~^
identify.r:60:60: warning: [object_usage_linter] no visible global function definition for 'set'
                    seen_not_checked <- seen_not_checked | set(m)
                                                           ^~~
identify.r:61:16: style: [indentation_linter] Indentation should be 8 spaces but is 16 spaces.
                }
        ~~~~~~~^
identify.r:62:12: style: [indentation_linter] Indentation should be 6 spaces but is 12 spaces.
            }
      ~~~~~^
identify.r:63:52: warning: [object_usage_linter] no visible global function definition for 'set'
            seen_not_checked <- seen_not_checked - set(n)
                                                   ^~~
identify.r:64:48: warning: [object_usage_linter] no visible global function definition for 'set'
            checked_so_far <- checked_so_far | set(n)
                                               ^~~
identify.r:65:8: style: [indentation_linter] Indentation should be 4 spaces but is 8 spaces.
        }
    ~~~^
identify.r:66:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    }
  ~^
identify.r:71:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    checked_so_far <- set()
  ~^
identify.r:71:23: warning: [object_usage_linter] no visible global function definition for 'set'
    checked_so_far <- set()
                      ^~~
identify.r:72:25: warning: [object_usage_linter] no visible global function definition for 'set'
    seen_not_checked <- set(node)
                        ^~~
identify.r:73:12: style: [spaces_inside_linter] Do not place spaces after parentheses.
    while ( ! set_is_empty(seen_not_checked)) {
           ^
identify.r:73:15: warning: [object_usage_linter] no visible global function definition for 'set_is_empty'
    while ( ! set_is_empty(seen_not_checked)) {
              ^~~~~~~~~~~~
identify.r:74:8: style: [indentation_linter] Indentation should be 4 spaces but is 8 spaces.
        check_these <- seen_not_checked
    ~~~^
identify.r:76:12: style: [indentation_linter] Indentation should be 6 spaces but is 12 spaces.
            for (m in parents[[n]]) {
      ~~~~~^
identify.r:77:16: style: [indentation_linter] Indentation should be 8 spaces but is 16 spaces.
                if ( ! (m %e% checked_so_far)) {
        ~~~~~~~^
identify.r:77:21: style: [spaces_inside_linter] Do not place spaces after parentheses.
                if ( ! (m %e% checked_so_far)) {
                    ^
identify.r:77:27: warning: [object_usage_linter] no visible global function definition for '%e%'
                if ( ! (m %e% checked_so_far)) {
                          ^~~
identify.r:78:20: style: [indentation_linter] Indentation should be 10 spaces but is 20 spaces.
                    seen_not_checked <- seen_not_checked | set(m)
          ~~~~~~~~~^
identify.r:78:60: warning: [object_usage_linter] no visible global function definition for 'set'
                    seen_not_checked <- seen_not_checked | set(m)
                                                           ^~~
identify.r:79:16: style: [indentation_linter] Indentation should be 8 spaces but is 16 spaces.
                }
        ~~~~~~~^
identify.r:80:12: style: [indentation_linter] Indentation should be 6 spaces but is 12 spaces.
            }
      ~~~~~^
identify.r:81:52: warning: [object_usage_linter] no visible global function definition for 'set'
            seen_not_checked <- seen_not_checked - set(n)
                                                   ^~~
identify.r:82:48: warning: [object_usage_linter] no visible global function definition for 'set'
            checked_so_far <- checked_so_far | set(n)
                                               ^~~
identify.r:83:8: style: [indentation_linter] Indentation should be 4 spaces but is 8 spaces.
        }
    ~~~^
identify.r:84:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    }
  ~^
identify.r:93:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
PRINT_STATE <- !TRUE
^~~~~~~~~~~
identify.r:96:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
USE_INITIAL_ALGM <- TRUE
^~~~~~~~~~~~~~~~
identify.r:103:3: style: [commented_code_linter] Commented code should be removed.
# TV <- 'scenario_main_base'
  ^~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:104:3: style: [commented_code_linter] Commented code should be removed.
# OV <- 'images_acquired'  # TODO: test to see if different from TV
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:105:3: style: [commented_code_linter] Commented code should be removed.
# GRAPH_FILE <- 'graph6.txt'  # TODO: test to see if it includes TV and OV
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:108:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
TV <- df_vars$val[1]
^~
identify.r:109:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
OV <- df_vars$val[2]  # TODO: test to see if different from TV
^~
identify.r:110:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
GRAPH_FILE <- 'graphtxt.txt'  # TODO: test to see if it includes TV and OV
^~~~~~~~~~
identify.r:110:15: style: [quotes_linter] Only use double-quotes.
GRAPH_FILE <- 'graphtxt.txt'  # TODO: test to see if it includes TV and OV
              ^~~~~~~~~~~~~~
identify.r:113:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
PATH <- getwd()
^~~~
identify.r:114:52: style: [infix_spaces_linter] Put spaces around all infix operators.
lines <- readLines(paste(PATH, "/", GRAPH_FILE, sep=""))
                                                   ^
identify.r:119:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    if (is_edge_line(line)) {
  ~^
identify.r:120:8: style: [indentation_linter] Indentation should be 4 spaces but is 8 spaces.
        if (!(first_node(line)  %e% nodes)) {
    ~~~^
identify.r:121:12: style: [indentation_linter] Indentation should be 6 spaces but is 12 spaces.
            nodes <- nodes | set(first_node(line))
      ~~~~~^
identify.r:122:8: style: [indentation_linter] Indentation should be 4 spaces but is 8 spaces.
        }
    ~~~^
identify.r:124:12: style: [indentation_linter] Indentation should be 6 spaces but is 12 spaces.
            nodes <- nodes | set(second_node(line))
      ~~~~~^
identify.r:125:8: style: [indentation_linter] Indentation should be 4 spaces but is 8 spaces.
        }
    ~~~^
identify.r:126:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    }
  ~^
identify.r:129:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    print(nodes)
  ~^
identify.r:136:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    children_of_n <- set()
  ~^
identify.r:139:8: style: [indentation_linter] Indentation should be 4 spaces but is 8 spaces.
        if (is_edge_line(line)) {
    ~~~^
identify.r:140:12: style: [indentation_linter] Indentation should be 6 spaces but is 12 spaces.
            if ((first_node(line)  == n) && (!(second_node(line) %e% children_of_n))) {
      ~~~~~^
identify.r:140:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 87 characters.
            if ((first_node(line)  == n) && (!(second_node(line) %e% children_of_n))) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
identify.r:141:16: style: [indentation_linter] Indentation should be 8 spaces but is 16 spaces.
                children_of_n <- children_of_n | set(second_node(line))
        ~~~~~~~^
identify.r:142:12: style: [indentation_linter] Indentation should be 6 spaces but is 12 spaces.
            }
      ~~~~~^
identify.r:143:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 86 characters.
            if ((second_node(line) == n) && (!(first_node(line)  %e% parents_of_n))) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
identify.r:144:16: style: [indentation_linter] Indentation should be 8 spaces but is 16 spaces.
                parents_of_n <- parents_of_n | set(first_node(line))
        ~~~~~~~^
identify.r:145:12: style: [indentation_linter] Indentation should be 6 spaces but is 12 spaces.
            }
      ~~~~~^
identify.r:146:8: style: [indentation_linter] Indentation should be 4 spaces but is 8 spaces.
        }
    ~~~^
identify.r:147:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    }
  ~^
identify.r:152:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    print(children)
  ~^
identify.r:158:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    if (PRINT_STATE) {
  ~^
identify.r:159:8: style: [indentation_linter] Indentation should be 4 spaces but is 8 spaces.
        print(paste(n, " has these descendants: "))
    ~~~^
identify.r:163:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    }
  ~^
identify.r:169:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 83 characters.
# Z1 is just the parents of TV. Not all will be measured, but take what's available
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
identify.r:170:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
Z1 <- parents[[TV]]
^~
identify.r:171:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 115 characters.
# TODO: Can we do this: if there are no paths between such a parent and OV not through TV, then don't add it to Z1.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:174:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 93 characters.
#   (a) nodes on any directed path from TV to OV; inclusive of OV, but exclusive of TV (2022)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~
identify.r:177:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
Z2 <- set()
^~
identify.r:178:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
desc_TV <- descendants(TV)
^~~~~~~
identify.r:179:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
prop_desc_TV <- desc_TV - set(TV)
^~~~~~~~~~~~
identify.r:180:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
prop_anc_TV <- ancestors(TV) - set(TV)
^~~~~~~~~~~
identify.r:181:18: style: [brace_linter] Opening curly braces should never go on their own line and should always be followed by a new line.
if (PRINT_STATE) {print(prop_anc_TV)}
                 ^
identify.r:181:37: style: [brace_linter] Closing curly-braces should always be on their own line, unless they are followed by an else.
if (PRINT_STATE) {print(prop_anc_TV)}
                                    ^
identify.r:183:1: style: [cyclocomp_linter] Functions should have cyclomatic complexity of less than 15, this has 17.
if (USE_INITIAL_ALGM) {
^
identify.r:186:5: style: [object_length_linter] Variable and function names should not be longer than 30 characters.
    parent_of_node_on_dir_path_not_a_desc <- (parents[[node]] - desc_TV)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
identify.r:194:24: style: [brace_linter] Opening curly braces should never go on their own line and should always be followed by a new line.
      if (PRINT_STATE) {print(paste("----parent considered: ", parent))}
                       ^
identify.r:194:72: style: [brace_linter] Closing curly-braces should always be on their own line, unless they are followed by an else.
      if (PRINT_STATE) {print(paste("----parent considered: ", parent))}
                                                                       ^
identify.r:195:61: style: [infix_spaces_linter] Put spaces around all infix operators.
      if (!length(intersect(prop_anc_TV, ancestors(parent)))==0) {
                                                            ^~
identify.r:196:26: style: [brace_linter] Opening curly braces should never go on their own line and should always be followed by a new line.
        if (PRINT_STATE) {print(unlist(intersect(prop_anc_TV, ancestors(parent))))}
                         ^
identify.r:196:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 83 characters.
        if (PRINT_STATE) {print(unlist(intersect(prop_anc_TV, ancestors(parent))))}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
identify.r:196:83: style: [brace_linter] Closing curly-braces should always be on their own line, unless they are followed by an else.
        if (PRINT_STATE) {print(unlist(intersect(prop_anc_TV, ancestors(parent))))}
                                                                                  ^
identify.r:197:9: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
        Z2 <- Z2 | set(parent)
        ^~
identify.r:204:5: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
    Z2 <- Z2 | parent_of_prop_desc_not_a_desc
    ^~
identify.r:205:22: style: [brace_linter] Opening curly braces should never go on their own line and should always be followed by a new line.
    if (PRINT_STATE) {print(paste(node, parent_of_prop_desc_not_a_desc))}
                     ^
identify.r:205:73: style: [brace_linter] Closing curly-braces should always be on their own line, unless they are followed by an else.
    if (PRINT_STATE) {print(paste(node, parent_of_prop_desc_not_a_desc))}
                                                                        ^
identify.r:206:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    }
  ~^
identify.r:210:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
unlist_Z1 <- unlist(Z1)
^~~~~~~~~
identify.r:211:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
unlist_Z2 <- unlist(Z2)
^~~~~~~~~
install_dependencies.R:1:3: style: [commented_code_linter] Commented code should be removed.
# scripts/install_dependencies.R
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
install_dependencies.R:5:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    "assertthat", "caret", "delayed", "devtools", "DiagrammeR", "dplyr", "ggplot2", "gifski", "hash",
  ~^
install_dependencies.R:5:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 101 characters.
    "assertthat", "caret", "delayed", "devtools", "DiagrammeR", "dplyr", "ggplot2", "gifski", "hash",
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
install_dependencies.R:6:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 82 characters.
    "here", "igraph", "knitr", "magick", "origami", "readr", "rJava", "rmarkdown",
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
install_dependencies.R:11:4: style: [indentation_linter] Indentation should be 2 spaces but is 4 spaces.
    "AIPW", "e1071", "earth", "nnet", "randomForest", "ranger", "xgboost"
  ~^
install_dependencies.R:19:65: style: [quotes_linter] Only use double-quotes.
    install.packages(missing_pkgs, dependencies = TRUE, repos = 'https://cloud.r-project.org/')
                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
install_dependencies.R:19:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 95 characters.
    install.packages(missing_pkgs, dependencies = TRUE, repos = 'https://cloud.r-project.org/')
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
install_dependencies.R:58:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
imputeMissings_url <- "https://cran.r-project.org/src/contrib/Archive/imputeMissings/imputeMissings_0.0.3.tar.gz"
^~~~~~~~~~~~~~~~~~
install_dependencies.R:58:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 113 characters.
imputeMissings_url <- "https://cran.r-project.org/src/contrib/Archive/imputeMissings/imputeMissings_0.0.3.tar.gz"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
install_dependencies.R:90:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 85 characters.
    message(paste("rJava initialized successfully with Java version:", java_version))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~
tetrad_utils.R:4:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
WINDOWS_JDK_URL <- "https://corretto.aws/downloads/latest/amazon-corretto-21-x64-windows-jdk.zip"
^~~~~~~~~~~~~~~
tetrad_utils.R:4:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 97 characters.
WINDOWS_JDK_URL <- "https://corretto.aws/downloads/latest/amazon-corretto-21-x64-windows-jdk.zip"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
tetrad_utils.R:5:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
MAC_JDK_URL_ARM <- "https://corretto.aws/downloads/latest/amazon-corretto-21-aarch64-macos-jdk.tar.gz"
^~~~~~~~~~~~~~~
tetrad_utils.R:5:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 102 characters.
MAC_JDK_URL_ARM <- "https://corretto.aws/downloads/latest/amazon-corretto-21-aarch64-macos-jdk.tar.gz"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
tetrad_utils.R:6:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
MAC_JDK_URL_X86 <- "https://corretto.aws/downloads/latest/amazon-corretto-21-x64-macos-jdk.tar.gz"
^~~~~~~~~~~~~~~
tetrad_utils.R:6:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 98 characters.
MAC_JDK_URL_X86 <- "https://corretto.aws/downloads/latest/amazon-corretto-21-x64-macos-jdk.tar.gz"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~
tetrad_utils.R:7:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
LINUX_JDK_URL <- "https://corretto.aws/downloads/latest/amazon-corretto-21-x64-linux-jdk.tar.gz"
^~~~~~~~~~~~~
tetrad_utils.R:7:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 96 characters.
LINUX_JDK_URL <- "https://corretto.aws/downloads/latest/amazon-corretto-21-x64-linux-jdk.tar.gz"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
tetrad_utils.R:8:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
TETRAD_URL <- "https://s01.oss.sonatype.org/content/repositories/releases/io/github/cmu-phil/tetrad-gui/7.6.5/tetrad-gui-7.6.5-launch.jar"
^~~~~~~~~~
tetrad_utils.R:8:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 138 characters.
TETRAD_URL <- "https://s01.oss.sonatype.org/content/repositories/releases/io/github/cmu-phil/tetrad-gui/7.6.5/tetrad-gui-7.6.5-launch.jar"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tetrad_utils.R:9:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
TETRAD_PATH <- "inst/tetrad-gui-7.6.5-launch.jar"
^~~~~~~~~~~
tetrad_utils.R:26:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:35:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 96 characters.
    stop("Please check your internet connection or the availability of the file and try again.")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
tetrad_utils.R:51:5: style: [commented_code_linter] Commented code should be removed.
#   download.file(url, destfile)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
tetrad_utils.R:53:7: style: [commented_code_linter] Commented code should be removed.
#     stop("Failed to download Java from ", url)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tetrad_utils.R:62:3: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
#' 
  ^
tetrad_utils.R:65:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 81 characters.
install_local_java <- function(java_dir = file.path("inst", "jdk-21.0.12.jdk")) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
tetrad_utils.R:67:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:72:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:77:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 97 characters.
    cat("Detected platform:", platform, ", System name:", sysname, ", Architecture:", arch, "\n")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
tetrad_utils.R:78:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
tetrad_utils.R:84:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
      
^~~~~~
tetrad_utils.R:92:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 97 characters.
      system(paste("tar -xzf inst/jdk.tar.gz -C", java_dir, "--strip-components=1"), wait = TRUE)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
tetrad_utils.R:94:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
      
^~~~~~
tetrad_utils.R:98:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 97 characters.
      system(paste("tar -xzf inst/jdk.tar.gz -C", java_dir, "--strip-components=1"), wait = TRUE)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
tetrad_utils.R:101:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
    
^~~~
tetrad_utils.R:107:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:114:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 85 characters.
#' This function sets the JAVA_HOME environment variable and updates the system PATH.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~
tetrad_utils.R:119:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:123:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:135:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:140:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:142:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:154:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 81 characters.
#' This function creates an ArrayList of Nodes from the data frame's column names
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
tetrad_utils.R:161:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:162:11: warning: [object_usage_linter] no visible global function definition for '.jnew'
  vars <- .jnew("java/util/ArrayList")
          ^~~~~
tetrad_utils.R:163:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:166:17: warning: [object_usage_linter] no visible global function definition for '.jnew'
    variable <- .jnew("edu/cmu/tetrad/data/ContinuousVariable", name)
                ^~~~~
tetrad_utils.R:167:13: warning: [object_usage_linter] no visible global function definition for '.jcast'
    node <- .jcast(variable, "edu/cmu/tetrad/graph/Node")
            ^~~~~~
tetrad_utils.R:168:5: warning: [object_usage_linter] no visible global function definition for '.jcall'
    .jcall(vars, "Z", "add", .jcast(node, "java/lang/Object"))
    ^~~~~~
tetrad_utils.R:168:30: warning: [object_usage_linter] no visible global function definition for '.jcast'
    .jcall(vars, "Z", "add", .jcast(node, "java/lang/Object"))
                             ^~~~~~
tetrad_utils.R:170:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:171:11: warning: [object_usage_linter] no visible global function definition for '.jcast'
  vars <- .jcast(vars, "java/util/List")
          ^~~~~~
tetrad_utils.R:172:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 88 characters.
  cat("Variable list creation complete. Number of variables added:", length(vars), "\n")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~
tetrad_utils.R:173:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:194:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:196:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:204:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:205:3: style: [indentation_linter] Indentation should be 2 spaces but is 3 spaces.
   .jinit()
  ^
tetrad_utils.R:205:4: warning: [object_usage_linter] no visible global function definition for '.jinit'
   .jinit()
   ^~~~~~
tetrad_utils.R:206:5: style: [commented_code_linter] Commented code should be removed.
  # .jinit(parameters = "-verbose:class")
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tetrad_utils.R:207:3: warning: [object_usage_linter] no visible global function definition for '.jaddClassPath'
  .jaddClassPath(TETRAD_PATH)
  ^~~~~~~~~~~~~~
tetrad_utils.R:209:19: warning: [object_usage_linter] no visible global function definition for '.jcall'
  java_version <- .jcall("java/lang/System", "S", "getProperty", "java.version")
                  ^~~~~~
tetrad_utils.R:215:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 84 characters.
  if (requireNamespace("rstudioapi", quietly = TRUE) && rstudioapi::isAvailable()) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
tetrad_utils.R:222:1: style: [trailing_whitespace_linter] Trailing whitespace is superfluous.
  
^~
tetrad_utils.R:225:14: warning: [object_usage_linter] no visible global function definition for '.jcall'
      dot <- .jcall("edu/cmu/tetrad/graph/GraphSaveLoadUtils", "Ljava/lang/String;", "graphToDot", graph)
             ^~~~~~
tetrad_utils.R:225:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 105 characters.
      dot <- .jcall("edu/cmu/tetrad/graph/GraphSaveLoadUtils", "Ljava/lang/String;", "graphToDot", graph)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
tetrad_utils.R:226:7: warning: [object_usage_linter] no visible global function definition for 'grViz'
      grViz(dot)
      ^~~~~
tetrad_utils.R:232:1: style: [trailing_blank_lines_linter] Trailing blank lines are superfluous.

^
TetradSearch.R:1:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.
TetradSearch <- setRefClass(
^~~~~~~~~~~~
TetradSearch.R:58:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 105 characters.
      .jcall(.self$search, "V", "setKnowledge", .jcast(.self$knowledge, "edu.cmu.tetrad.data.Knowledge"))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
TetradSearch.R:93:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 89 characters.
    # @param penalty_discount The penalty discount to use in the SemBicScore calculation.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
TetradSearch.R:96:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 81 characters.
                      .jcast(.self$cov, "edu.cmu.tetrad.data.ICovarianceMatrix"))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
TetradSearch.R:111:9: style: [commented_code_linter] Commented code should be removed.
      # .jcall(.self$test, "V", "setAlpha", alpha)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TetradSearch.R:124:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 91 characters.
                              .jcast(.self$test, "edu.cmu.tetrad.search.IndependenceTest"))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
TetradSearch.R:165:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 94 characters.
                              .jcast(suborder_search, "edu.cmu.tetrad.search.SuborderSearch"))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
TetradSearch.R:201:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 84 characters.
        .self$search <- .jnew("edu.cmu.tetrad.search.BFci", .self$test, .self$score)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
TetradSearch.R:220:62: style: [commas_linter] Commas should always have a space after.
        .self$search <- .jnew("edu.cmu.tetrad.search.LvLite",.self$test, .self$score)
                                                             ^
TetradSearch.R:220:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 85 characters.
        .self$search <- .jnew("edu.cmu.tetrad.search.LvLite",.self$test, .self$score)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~

========================================
lintr scan
========================================

